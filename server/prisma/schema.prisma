generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//add customer table to store customer details; will link to users table where customer_id in users table will be the id key in customer table
model customers {
  id                  String   @id @default(uuid())
  name                String   @db.VarChar(255)
  phone               String?  @unique
  address             String?
  city                String?
  state               String?
  zip                 String?
  country             String?
  tax_identifier      String?
  registration_number String?
  website             String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  industry            String?
  users               users[]
}

//user table linked to customer table where a user can only belong to one customer
model users {
  id          String            @id @default(uuid())
  username    String            @db.VarChar(30)
  first_name  String            @db.VarChar(30)
  last_name   String            @db.VarChar(30)
  email       String?           @unique
  customer_id String
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  password    String
  user_types  user_user_types[]
  tokens      tokens[]
  customers   customers         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//intermediate table to link users and user_type tables
model user_user_types {
  id           Int        @id @default(autoincrement())
  user_id      String
  user_type_id Int
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_types   user_types @relation(fields: [user_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//user_type table; a user can be more than one type
model user_types {
  id             Int               @id @default(autoincrement())
  type           String            @unique @db.VarChar(30)
  description    String
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  user_user_type user_user_types[]
}

//tokens table linked to users table where a user can have multiple tokens; also linked to providers table where a token can only belong to one provider
model tokens {
  id              String    @id @default(uuid())
  credentials_id  String    @unique
  access_token    String    @unique
  refresh_token   String?   @unique
  access_expires  DateTime  @db.Date
  refresh_expires DateTime  @db.Date
  created_at      DateTime  @default(now())
  refreshed_at    DateTime  @updatedAt
  provider_id     String
  user_id         String
  assets          assets[]
  users           users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providers       providers @relation(fields: [provider_id], references: [provider_id], onDelete: NoAction, onUpdate: NoAction)
  assetsId        String?
}

//assets table linked to tokens table where a user can have multiple tokens
model assets {
  id           String         @id @default(uuid())
  account_id   String         @unique
  user_id      String
  asset_type   String
  accounts     accounts[]
  tokens       tokens         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions transactions[]
}

//transactions table linked to assets table where an asset can have multiple transactions
model transactions {
  id                String          @id @unique
  asset_id          String
  transaction_id    String          @unique
  currency          String          @db.VarChar(3)
  amount_in_minor   Decimal         @db.Decimal(15, 6)
  status            String          @db.VarChar(30)
  created_at        DateTime        @db.Date
  executed_at       DateTime?       @db.Date
  settled_at        DateTime?       @db.Date
  transaction_type  String          @db.VarChar(30)
  reference         String?
  context_code      String?
  payout_id         String?
  payment_id        String?
  beneficiary_id    String
  payment_source_id String
  remitter_id       String?
  beneficiary       beneficiaries   @relation(fields: [beneficiary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_sources   payment_sources @relation(fields: [payment_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assets            assets          @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  remitters         remitters?      @relation(fields: [remitter_id], references: [id])
  remitterId        String?
}

//beneficiaries table linked to transactions table where a beneficiary can have multiple transactions
model beneficiaries {
  id                   String                 @id @unique
  type                 String                 @db.VarChar(30)
  account_holder_name  String
  transactions         transactions[]
  accounts_identifiers accounts_identifiers[]
}

//accounts indentifiers table linked to beneficiaries table where a beneficiary can have multiple accounts; also linked to payment sources table
model accounts_identifiers {
  id                String          @id @default(uuid())
  type              String          @db.VarChar(30)
  account_number    String?
  iban              String?         @db.VarChar(34)
  swift             String?         @db.VarChar(11)
  branch_number     String?         @db.VarChar(30)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  beneficiary_id    String
  payment_source_id String
  beneficiaries     beneficiaries   @relation(fields: [beneficiary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payment_sources   payment_sources @relation(fields: [payment_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//payment sources table linked to accounts identifiers table where an account identifier can have  1 payment source;
model payment_sources {
  id                   String                 @id @default(uuid())
  account_holder_name  String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  accounts_identifiers accounts_identifiers[]
  transactions         transactions[]
}

//remitter table linked to transactions table where a remitter can have multiple transactions
model remitters {
  id                  String         @id @default(uuid())
  account_holder_name String
  transactions        transactions[]
}

//accounts table linked to assets table where an asset can have multiple accounts
model accounts {
  id             String    @id @unique
  account_id     String    @unique
  asset_id       String
  account_type   String    @db.VarChar(30)
  display_name   String
  description    String?
  currency       String    @db.VarChar(3)
  account_number String?
  iban           String?   @db.VarChar(34)
  swift          String?   @db.VarChar(11)
  branch_number  String?   @db.VarChar(30)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  provider_id    String
  assets         assets    @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providers      providers @relation(fields: [provider_id], references: [provider_id], onDelete: NoAction, onUpdate: NoAction)
}

//providers table linked to accounts table where an account can only belong to one bank; also linked to tokens table where a token can only belong to one bank
model providers {
  id           Int        @id @default(autoincrement())
  provider_id  String     @unique
  name         String     @db.VarChar(255)
  accounts     accounts[]
  tokens       tokens[]
  logo_url     String?
  display_name String?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}
